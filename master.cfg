# -*- python -*-
# ex: set syntax=python:

# This is the buildmaster config file for cordova. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

from twisted.python import log

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
# from buildbot import manhole

# Manhole permits to ssh into the buildbot master process and examine the global variables. 
# Temporary disable it since there known issues with manhole on Windows platform so buildbot can't launch master
# c['manhole']=manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd")

# Detect system we are running
import platform
log.msg("Platform is %s" % (platform.system(),))
is_Windows=platform.system() == "Windows"

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 
from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

import logging
import json
with open("../config.json") as f:
    json_config=json.load(f)

with open("../repos.json") as f:
    json_repos=json.load(f)

platform_list=json_config['app']['platforms']    
branch_release =str(json_config['app']['release'])

build_android=('android' in platform_list)
build_ios=('ios' in platform_list)
build_wp8=('wp8' in platform_list)
if build_wp8 and not is_Windows :
    log.err("wp8 and windows8 builds are supported on Windows platform only")

projectbranches=['master',branch_release]
polltime=300
stabletime=30
mail_to=[]
for mt in json_config['mail']['to'] :
   mail_to.append(str(mt))

mail_from=str(json_config['mail']['from'])
mail_pw=str(json_config['mail']['password'])
mail_serverURL=str(json_config['mail']['serverURL'])

def getBranches(tags) :
  result=[];
  for b in tags :
    if(b == 'RELEASE') :
       result.append(branch_release)
    else :
       result.append(str(b))
  return result


####### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.changes import pb

c['slaves'] = [
    BuildSlave("ios-slave", "pass",max_builds=1),
    BuildSlave("android-slave", "pass",max_builds=1),
    BuildSlave("windows-slave", "pass",max_builds=1),
    BuildSlave("common-slave","pass",max_builds=3)
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9889

repos={}
branches={}

for jrepo in json_repos['repos'] :
  cat = str(jrepo['category'])
  title = str(jrepo["title"])
  repo_url=str(jrepo['repo'])
  if cat == "PLUGIN" :
    c['change_source'].append(GitPoller(repo_url, project=cat,category=cat, branches=getBranches([jrepo['release'],jrepo['current']]), pollinterval=polltime))

  elif not (cat == "PLATFORM") :
    repos[title] = repo_url
    branches[title] = str(jrepo['current'])
    c['change_source'].append(GitPoller(repo_url, project=cat,category=cat, branches=getBranches([jrepo['release'],jrepo['current']]), pollinterval=polltime))

  else :
    repos[title] = repo_url
    branches[title] = str(jrepo['current'])
    if(build_android and title=="ANDROID") :
       c['change_source'].append(GitPoller(repo_url,project=title,category='PLATFORM', branches=getBranches([jrepo['release'],jrepo['current']]), pollinterval=polltime))

    if(build_ios and title=="IOS") :
       c['change_source'].append(GitPoller(repo_url,project=title,category='PLATFORM', branches=getBranches([jrepo['release'],jrepo['current']]), pollinterval=polltime))

    if(build_wp8 and title=="WP8") :
       c['change_source'].append(GitPoller(repo_url,project=title,category='PLATFORM', branches=getBranches([jrepo['release'],jrepo['current']]), pollinterval=polltime))

c['change_source'].append(pb.PBChangeSource(port=9999,user='Cordova',passwd='Cordova'))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

force_builders=[]

c['schedulers'] = []

for test in json_repos['tests'] :
  if test["platform"] in platform_list :
    c['schedulers'].append(SingleBranchScheduler(
                            name=str(test["title"]),
                            change_filter=filter.ChangeFilter(branch=test["branch"],project=test["categories"]),
                            treeStableTimer=stabletime,
                            builderNames=[str(test["builder"])]))
    force_builders.append(str(test["builder"]))

c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=force_builders))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

shellCmd="/bin/sh"
shellRunParam="-c"
if is_Windows :
    shellCmd="cmd"
    shellRunParam="/c"

cli_steps = [
    ShellCommand(command=[shellCmd,shellRunParam,"rm -rf cordova-*"],workdir='build',haltOnFailure=False,description='Cordova Clean', descriptionDone='Cordova Clean'),
    ShellCommand(command=["git","clone",repos['CLI'],"cordova-cli"],workdir='build',haltOnFailure=True,description='Get CLI',descriptionDone='Get CLI'),
    ShellCommand(command=["mkdir","node_modules"],workdir='build/cordova-cli',haltOnFailure=True,description='prepare Plugman',descriptionDone='Prepare Plugman'),
    ShellCommand(command=["git","clone",repos['PLUGMAN'],"plugman"],workdir='build/cordova-cli/node_modules',haltOnFailure=True,description='Update Plugman',descriptionDone='Update Plugman'),
    ShellCommand(command=["npm","install"], workdir='build/cordova-cli/node_modules/plugman',haltOnFailure=True,description='Install Plugman',descriptionDone='Install Plugman'),
    ShellCommand(command=["npm","install"],workdir='build/cordova-cli',haltOnFailure=True,description='Install CLI',descriptionDone='Install CLI'),
    ShellCommand(command=["npm","test"], workdir='build/cordova-cli',haltOnFailure=True,description='Test CLI',descriptionDone='Test CLI'),
]

plugman_steps = [
    ShellCommand(command=[shellCmd,shellRunParam,"rm -rf cordova-*"],workdir='build',haltOnFailure=False,description='Cordova Clean', descriptionDone='Cordova Clean'),
    ShellCommand(command=["git","clone",repos['PLUGMAN'],"cordova-plugman"],workdir='build',haltOnFailure=True,description='Get Plugman',descriptionDone='Get Plugman'),
    ShellCommand(command=["npm","install"], workdir='build/cordova-plugman',haltOnFailure=True,description='Install Plugman',descriptionDone='Install Plugman'),
    ShellCommand(command=["npm","test"], workdir='build/cordova-plugman',haltOnFailure=True,description='Test Plugman',descriptionDone='Test Plugman'),
]

# The steps that are required for any platform just to get tools and source in place
common_steps_1 = [
    ShellCommand(command=["rm","-rf","medic"],workdir='build',haltOnFailure=False,description='Medic Clean',descriptionDone='Medic Clean'),
    ShellCommand(command=["rm","-rf","cordova-*"],workdir='build',haltOnFailure=False,description='Cordova Clean', descriptionDone='Cordova Clean'),
    ShellCommand(command=["rm","-rf","mobilespec"],workdir='build',haltOnFailure=False,description='Mobilespec Clean',descriptionDone='Mobilespec Clean'),
    ShellCommand(command=[shellCmd,shellRunParam,"git clone -b " + branches['TESTMASTER'] + " " + repos['TESTMASTER']+" medic"],workdir='build',haltOnFailure=True, description='Get Medic', descriptionDone='Get Medic'),
    # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    ShellCommand(command=["npm","install","--production"], workdir='build/medic',haltOnFailure=True,description='Install Medic',descriptionDone='Install Medic'),
    ShellCommand(command=["cp","../../../../config.json","./config.json"], workdir='build/medic',haltOnFailure=True,description='Copy Config',descriptionDone='Copy Config'),
    ShellCommand(command=["git","clone",repos['COHO']],workdir='build',haltOnFailure=True,description='Get COHO',descriptionDone='Get COHO'),
    ShellCommand(command=["npm","install", "--production"],workdir='build/cordova-coho',haltOnFailure=True,description='Install COHO', descriptionDone='Install COHO'),
]

# The steps for any platform before platform add
common_steps_mobilespec_1 = [
    ShellCommand(command=["mkdir","node_modules"],workdir='build/cordova-cli',haltOnFailure=True,description='prepare Plugman',descriptionDone='Prepare Plugman'),
    ShellCommand(command=[shellCmd,shellRunParam, "git clone -b " + branches['PLUGMAN']  + ' ' + repos['PLUGMAN'] + " plugman"],workdir='build/cordova-cli/node_modules',haltOnFailure=True,description='Update Plugman',descriptionDone='Update Plugman'),
    ShellCommand(command=["npm","install","--production"], workdir='build/cordova-cli/node_modules/plugman',haltOnFailure=True,description='Delete Plugman',descriptionDone='Install Plugman'),
    ShellCommand(command=["npm","install","--production"],workdir='build/cordova-cli',haltOnFailure=True,description='Install CLI',descriptionDone='Install CLI'),
    ShellCommand(command=["node", "cordova-cli/bin/cordova","create","mobilespec","org.apache.mobilespec","mobilespec"],workdir='build',haltOnFailure=True, description='CLI Create', descriptionDone='CLI Create')
]

# The steps for any platform after platform add
copy_www_cmd = ShellCommand(command=["ln","-s","../cordova-mobile-spec","www"],workdir='build/mobilespec',haltOnFailure=True,description ='Link www',descriptionDone ='Link www')
if is_Windows :
    copy_www_cmd=ShellCommand(command=["cp","-r","../cordova-mobile-spec","www"],workdir='build\\mobilespec',haltOnFailure=True,description ='Copy www',descriptionDone ='Copy www')
common_steps_mobilespec_2 = [
    ShellCommand(command=["node", "../cordova-cli/bin/cordova","plugin","add","../cordova-mobile-spec/dependencies-plugin"],workdir='build/mobilespec',haltOnFailure=True,description='Plugin add',descriptionDone='Plugin add'),
    ShellCommand(command=["node", "../cordova-cli/bin/cordova", "plugin", "add", "../medic/cordova-plugin-medic"],workdir='build/mobilespec',haltOnFailure=True,description='Medic plugin add',descriptionDone='Medic plugin add'),
    ShellCommand(command=["rm","-rf","mobilespec/www"],workdir='build',haltOnFailure=False,description='Remove www',descriptionDone='Remove www'),
    copy_www_cmd,
    ShellCommand(command=["node", "../cordova-cli/bin/cordova","prepare"],workdir='build/mobilespec',haltOnFailure=True,description='CLI Prepare',descriptionDone='CLI Prepare')
]

# The steps to build just the js
common_steps_js = [
    ShellCommand(command=["npm","install"], workdir='build/cordova-js',description='Install Grunt',descriptionDone='Install Grunt'),
    ShellCommand(command=["grunt"], workdir='build/cordova-js',description='Grunt', descriptionDone='Grunt')
]

c['builders'] = []

if(build_ios) :
    factory_IOS = BuildFactory()
    factory_IOS.addStep(ShellCommand(command=[shellCmd,shellRunParam,"rm -rf ~/.cordova/lib/ios"],workdir='build',haltOnFailure=False,description='Remove cache',descriptionDone='Remove cache'))
    factory_IOS.addSteps(common_steps_1)
    factory_IOS.addStep(ShellCommand(command=[shellCmd,shellRunParam,"./cordova-coho/coho repo-clone -r plugins -r mobile-spec -r ios -r cli -r js "],workdir='build',haltOnFailure=True,description='COHO Clone', descriptionDone='COHO Clone'))
    factory_IOS.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLUGIN","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Plugins->master',descriptionDone='Plugins->master'))
    factory_IOS.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLATFORM","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Platform->release',descriptionDone='Platform->release'))
    factory_IOS.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=MSPEC","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Mspec->release',descriptionDone='Mspec->release'))
    factory_IOS.addSteps(common_steps_mobilespec_1)
    factory_IOS.addStep(ShellCommand(command=["node","medic/writejson.js","--branch="+branch_release],workdir='build',haltOnFailure=True, description='Write json',descriptionDone='Write json'))
    factory_IOS.addStep(ShellCommand(command=["../cordova-cli/bin/cordova","platform","add","ios"],workdir='build/mobilespec',haltOnFailure=True,description='Platform Add',descriptionDone='Platform Add'))
    factory_IOS.addSteps(common_steps_mobilespec_2)
    factory_IOS.addStep(ShellCommand(command=["node", "medic/build_ios.js","--branch="+branch_release], workdir='build', timeout=600,description='Deploy IOS',descriptionDone='Deploy IOS',name='Deploy IOS'))
    c['builders'].append(BuilderConfig(name="IOS_Release",slavenames=["ios-slave"], factory=factory_IOS))

if(build_android) :
    factory_Android = BuildFactory()
    factory_Android.addStep(ShellCommand(command=[shellCmd,shellRunParam,"rm -rf ~/.cordova/lib/android"],workdir='build',haltOnFailure=False,description='Remove cache',descriptionDone='Remove cache'))
    factory_Android.addSteps(common_steps_1)
    factory_Android.addStep(ShellCommand(command=[shellCmd,shellRunParam,"./cordova-coho/coho repo-clone -r plugins -r mobile-spec -r android -r cli -r js "],workdir='build',haltOnFailure=True,description='COHO Clone', descriptionDone='COHO Clone'))
    factory_Android.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLUGIN","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Plugins->master',descriptionDone='Plugins->master'))
    factory_Android.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLATFORM","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Platform->release',descriptionDone='Platform->release'))
    factory_Android.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=MSPEC","--releasebranch="+branch_release,"--release"],workdir='build',haltOnFailure=False,description='Mspec->release',descriptionDone='Mspec->release'))
    factory_Android.addSteps(common_steps_mobilespec_1)
    factory_Android.addStep(ShellCommand(command=["node","medic/writejson.js","--branch="+branch_release],workdir='build',haltOnFailure=True, description='Write json',descriptionDone='Write json'))
    factory_Android.addStep(ShellCommand(command=["../cordova-cli/bin/cordova","platform","add","android"],workdir='build/mobilespec',haltOnFailure=True,description='Platform Add',descriptionDone='Platform Add'))
    factory_Android.addSteps(common_steps_mobilespec_2)
    factory_Android.addStep(ShellCommand(command=["node", "medic/build_android.js", "--branch="+branch_release], workdir='build', timeout=600,description='Deploy Android',descriptionDone='Deploy Android',name='Deploy Android'))
    c['builders'].append(BuilderConfig(name="Android_Release",slavenames=["android-slave"],factory=factory_Android))

if(build_ios) :
    factory_IOS_master = BuildFactory()
    factory_IOS_master.addStep(ShellCommand(command=[shellCmd,shellRunParam,"rm -rf ~/.cordova/lib/ios"],workdir='build',haltOnFailure=False,description='Remove cache',descriptionDone='Remove cache'))
    factory_IOS_master.addSteps(common_steps_1)
    factory_IOS_master.addStep(ShellCommand(command=[shellCmd,shellRunParam,"./cordova-coho/coho repo-clone -r plugins -r mobile-spec -r ios -r cli -r js "],workdir='build',haltOnFailure=True,description='COHO Clone', descriptionDone='COHO Clone'))
    factory_IOS_master.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLUGIN","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Plugins->dev',descriptionDone='Plugins->dev'))
    factory_IOS_master.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLATFORM","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Platform->master',descriptionDone='Platform->master'))
    factory_IOS_master.addSteps(common_steps_mobilespec_1)
    factory_IOS_master.addStep(ShellCommand(command=["node","medic/writejson.js","--branch=master"],workdir='build',haltOnFailure=True, description='Write json',descriptionDone='Write json'))
    factory_IOS_master.addStep(ShellCommand(command=["../cordova-cli/bin/cordova","platform","add","ios"],workdir='build/mobilespec',haltOnFailure=True, description='Platform Add',descriptionDone='Platform Add'))
    factory_IOS_master.addSteps(common_steps_js)
    factory_IOS_master.addSteps(common_steps_mobilespec_2)
    factory_IOS_master.addStep(ShellCommand(command=["cp","-f","cordova-js/pkg/cordova.ios.js","mobilespec/platforms/ios/www/cordova.js"],workdir='build',haltOnFailure=True,description='Copy JS',descriptionDone='Copy JS'))
    factory_IOS_master.addStep(ShellCommand(command=["node", "medic/build_ios.js"], workdir='build', timeout=600,description='Deploy IOS',descriptionDone='Deploy IOS',name='Deploy IOS'))
    c['builders'].append(BuilderConfig(name="IOS_Master",slavenames=["ios-slave"],factory=factory_IOS_master))

if(build_android) :
    factory_Android_master = BuildFactory()
    factory_Android_master.addStep(ShellCommand(command=[shellCmd,shellRunParam,"rm -rf ~/.cordova/lib/android"],workdir='build',haltOnFailure=False,description='Remove cache',descriptionDone='Remove cache'))
    factory_Android_master.addSteps(common_steps_1)
    factory_Android_master.addStep(ShellCommand(command=[shellCmd,shellRunParam,"./cordova-coho/coho repo-clone -r plugins -r mobile-spec -r android -r cli -r js "],workdir='build',haltOnFailure=True,description='COHO Clone', descriptionDone='COHO Clone'))
    factory_Android_master.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLUGIN","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Plugins->dev',descriptionDone='Plugins->dev'))
    factory_Android_master.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLATFORM","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Platform->master',descriptionDone='Platform->master'))
    factory_Android_master.addStep(ShellCommand(command=[shellCmd,shellRunParam,'[ -f "package.json" ] && npm install'],workdir='build/cordova-android/bin',haltOnFailure=True,description='NPM Install', descriptionDone='NPM Install'))
    factory_Android_master.addSteps(common_steps_mobilespec_1)
    factory_Android_master.addStep(ShellCommand(command=["node","medic/writejson.js","--branch=master"],workdir='build',haltOnFailure=True, description='Write json',descriptionDone='Write json'))
    factory_Android_master.addStep(ShellCommand(command=["../cordova-cli/bin/cordova","platform","add","android"],workdir='build/mobilespec',haltOnFailure=True, description='Platform Add',descriptionDone='Platform Add'))
    factory_Android_master.addSteps(common_steps_js)
    factory_Android_master.addSteps(common_steps_mobilespec_2)
    factory_Android_master.addStep(ShellCommand(command=["cp","-f","cordova-js/pkg/cordova.android.js","mobilespec/platforms/android/assets/www/cordova.js"],workdir='build',haltOnFailure=True,description='Copy JS',descriptionDone='Copy JS'))
    factory_Android_master.addStep(ShellCommand(command=["node", "medic/build_android.js"], workdir='build', timeout=600,description='Deploy Android',descriptionDone='Deploy Android',name='Deploy Android'))
    c['builders'].append(BuilderConfig(name="Android_Master",slavenames=["android-slave"],factory=factory_Android_master))

if(build_wp8) :
    factory_wp8 = BuildFactory()
    factory_wp8.addStep(ShellCommand(command=[shellCmd,shellRunParam,"rm -rf %userprofile%/.cordova/lib/wp"],workdir='build',haltOnFailure=False,description='Remove cache',descriptionDone='Remove cache'))
    factory_wp8.addSteps(common_steps_1)
    factory_wp8.addStep(ShellCommand(command=[shellCmd,shellRunParam,"node .\\cordova-coho\\coho repo-clone -r plugins -r mobile-spec -r wp8 -r js "],workdir='build',haltOnFailure=True,description='COHO Clone', descriptionDone='COHO Clone'))
    # TODO find the way to specify cli branch to clone for COHO, currently use step below
    factory_wp8.addStep(ShellCommand(command=[shellCmd,shellRunParam, "git clone -b " + branches['CLI'] + ' ' + repos['CLI'] + " cordova-cli"],workdir='build',haltOnFailure=True, description='Get CLI', descriptionDone='Get CLI'))
    factory_wp8.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLUGIN","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Plugins->dev',descriptionDone='Plugins->dev'))
    factory_wp8.addStep(ShellCommand(command=["node","medic/checkout.js","--path=../../../repos.json","--cat=PLATFORM","--releasebranch="+branch_release],workdir='build',haltOnFailure=False,description='Platform->master',descriptionDone='Platform->master'))
    # cordova-wp8 still has 3.0.0 version so rewrite version explicitly
    factory_wp8.addStep(ShellCommand(command=[shellCmd, shellRunParam,"echo 3.1.0 > VERSION"], workdir='build/cordova-wp8',haltOnFailure=True, description='Version overwrite',descriptionDone='Version owerwrite'))
    # pach cordova-wp8 template to prevent app to lock the screen. In other case we won't be able to re-install the app next time.
    factory_wp8.addStep(ShellCommand(command=["node","medic\src\utils\patch_wp8_template.js"],workdir='build',haltOnFailure=True, description='Patch WP8 template',descriptionDone='Patch WP8 template'))
    factory_wp8.addSteps(common_steps_mobilespec_1)
    factory_wp8.addStep(ShellCommand(command=["node","medic/writejson.js","--branch=master"],workdir='build',haltOnFailure=True, description='Write json',descriptionDone='Write json'))
    factory_wp8.addStep(ShellCommand(command=["node","../cordova-cli/bin/cordova","platform","add","wp8"],workdir='build\\mobilespec',haltOnFailure=True, description='Platform Add',descriptionDone='Platform Add'))
    factory_wp8.addSteps(common_steps_js)
    factory_wp8.addSteps(common_steps_mobilespec_2)
    factory_wp8.addStep(ShellCommand(command=["cp","-f","cordova-js/pkg/cordova.windowsphone.js","mobilespec/platforms/wp8/www/cordova.js"],workdir='build',haltOnFailure=True,description='Copy JS',descriptionDone='Copy JS'))
    factory_wp8.addStep(ShellCommand(command=["node", "medic/build_wp8.js"], workdir='build', timeout=600,description='Deploy WP8',descriptionDone='Deploy WP8',name='Deploy WP8'))

    c['builders'].append(BuilderConfig(name="wp8_master",slavenames=["windows-slave"], factory=factory_wp8))

# TODO. temporary disable separate cli and plugman tests on Windows
if not is_Windows :
    factory_cli = BuildFactory()
    factory_cli.addSteps(cli_steps)
    c['builders'].append(BuilderConfig(name="Tools_CLI",slavenames=["common-slave"],factory=factory_cli))

    factory_plugman = BuildFactory()
    factory_plugman.addSteps(plugman_steps)
    c['builders'].append(BuilderConfig(name="Tools_Plugman",slavenames=["common-slave"],factory=factory_plugman))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status import mail
from buildbot.status.builder import Results
from buildbot.status.mail import MailNotifier

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("Cordova","Cordova")]),
    gracefulShutdown = False,
    forceBuild = True, # 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))


mn1 = MailNotifier(
      fromaddr=mail_from,
      sendToInterestedUsers=False,
      mode=('change',),
      extraRecipients=mail_to,
      relayhost='smtp.gmail.com',
      smtpPort=587,
      useTls=True,
      smtpUser=mail_from,
      smtpPassword=mail_pw,
)

c['status'].append(mn1)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cordova Testing"
c['titleURL'] = "http://cordova.apache.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = mail_serverURL

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
