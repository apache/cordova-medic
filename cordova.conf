#!/usr/bin/python

"""
This is the config file for the Cordova project.
"""

import json

from buildbot.schedulers.timed import Nightly

class MedicConfig(object):
    """static class that encapsulates all configuration parameters"""

    def __init__(self):
        with open(FP + "cordova-config.json") as fname:
            self.json_config = json.load(fname)

        with open(FP + "cordova-repos.json") as fname:
            self.json_repos = json.load(fname)

        self.platform_list = self.json_config['app']['platforms']
        self.branch_release = self.json_config['app']['release']
        self.build_timeout = self.json_config['app']['timeout']

        self.projectbranches = ['master', self.branch_release]
        self.polltime = 300
        self.stabletime = 30

        # GitPoller on Windows fails if gitbin location is not provided.
        # Set git location if running medic master on Windows
        self.git_bin = ""  #"c:\Program Files (x86)\Git\cmd\git.exe"

        self.repos = {}
        self.branches = {}

        self.fetch_repos()
        self.fetch_branches()

    def has_platform(self, platform_name):
        """Indicates whether specific platform is need to be built"""
        return platform_name in self.platform_list

    def fetch_repos(self):
        """Fetches repos from config.json"""
        for repo in self.json_repos['repos']:
            title = str(repo["title"])
            repo_url = str(repo['repo'])
            self.repos[title] = repo_url

    def fetch_branches(self):
        """Fetches branches for each repo from config.json"""
        for jrepo in self.json_repos['repos']:
            title = str(jrepo["title"])
            self.branches[title] = str(jrepo['current'])

CONFIG = MedicConfig()

# schedulers

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes.filter import ChangeFilter

FORCE_BUILDERS = []

for test in CONFIG.json_repos['tests']:

    test_platform = test["platform"]
    test_builders = test["builder"]
    # convert test_builders to list if necessary
    if type(test_builders) == unicode:
        test_builders = [test_builders]
    # and convert list members to strings (instead of unicode)
    test_builders = [str(b) for b in test_builders]

    if CONFIG.has_platform(test_platform):

        FORCE_BUILDERS.extend(test_builders)
        c['schedulers'].append(SingleBranchScheduler(
            name=test["title"],
            change_filter=ChangeFilter(
                branch=test["branch"],
                project=test["categories"]),
            treeStableTimer=CONFIG.stabletime,
            builderNames=test_builders))

c['schedulers'].append(ForceScheduler(name="force", builderNames=FORCE_BUILDERS))
c['schedulers'].append(Nightly(
        name         = 'cordova_nightly',
        reason       = 'nightly',
        branch       = 'master',
        hour         = 0,
        builderNames = [
            'cordova-ios',
            'cordova-android',
            'cordova-android-win',
            'cordova-wp8',
            'cordova-wp8-vs2012-win8',
            'cordova-windows',
            'cordova-windows8-vs2012-win8',
        ],
))

# new build steps

from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.transfer import FileDownload

def RMCommand(path, **kwargs):
    js_script = "var s = require('shelljs'); console.log('removing {path}'); s.rm('-rf', '{path}');".format(path=path)
    return ShellCommand(command=['node -e "'+ js_script + '"> rm.txt 2>&1'], logfiles = {"log": "rm.txt"}, **kwargs)

def InstallShellJS():
    return ShellCommand(command=["npm", "install", "shelljs"], workdir='build', haltOnFailure=True, description='Install shelljs')

class PlatformTestBase(object):
    """Base class with common build steps for all platforms"""
    def __init__(self, platform=""):
        self.platform = platform

    def init_workspace_steps(self):
        """Returns a list of initial environment setup steps"""
        return [
            InstallShellJS(),
            RMCommand(path="~/.cordova/" + self.platform, workdir='build', haltOnFailure=False, description='Remove cache'),
            RMCommand(path="*", workdir='build', haltOnFailure=False, description='Clean workdir'),
            ShellCommand(command=["git", "clone", "--depth", "1", "-b", CONFIG.branches['TESTMASTER'], CONFIG.repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic'),
            # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
            ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic'),
            FileDownload(mastersrc=FP+"cordova-config.json", slavedest="medic/config.json", haltOnFailure=True),
            FileDownload(mastersrc=FP+"cordova-repos.json", slavedest="medic/repos.json", haltOnFailure=True),
            ShellCommand(command=["git", "clone", "--depth", "1", CONFIG.repos['COHO']], workdir='build', haltOnFailure=True, description='Get COHO'),
            ShellCommand(command=["npm", "install", "--production"], workdir='build/cordova-coho', haltOnFailure=True, description='Install COHO'),
        ]

    def repos_clone_steps(self):
        """Returns a list of steps for cloning necessary repos"""
        platform = self.platform
        # required by coho tools to correctly resolve repo location
        if platform == "blackberry10":
            platform = "blackberry"
        return [
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=CORDOVA-MSPEC", "--releasebranch=" + CONFIG.branch_release], workdir='build', haltOnFailure=True, description='Clone Mobilespec'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=CORDOVA-PLUGIN", "--releasebranch=" + CONFIG.branch_release], workdir='build', haltOnFailure=True, description='Clone Plugins'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=CORDOVA-" + platform, "--releasebranch=" + CONFIG.branch_release], workdir='build', haltOnFailure=True, description='Clone Platform'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=CORDOVA-JS", "--releasebranch=" + CONFIG.branch_release], workdir='build', haltOnFailure=True, description='Clone JS'),
        ]

    def cli_steps(self):
        """Returns a list of steps for CLI setup"""
        return [
            ShellCommand(command=["git", "clone", "-b", CONFIG.branches['CLI'], CONFIG.repos['CLI'], "cordova-cli"], workdir='build', haltOnFailure=True, description='Clone CLI'),
            ShellCommand(command=["git", "clone", "--depth", "1", "-b", CONFIG.branches['CORDOVA-LIB'], CONFIG.repos['CORDOVA-LIB'], "cordova-lib"], workdir='build', haltOnFailure=True, description='Clone cordova-lib'),
            ShellCommand(command=["npm", "install", "--production"], workdir='build/cordova-lib/cordova-lib', haltOnFailure=True, description='Install cordova-lib'),
            ShellCommand(command=["rm", "-f", "npm-shrinkwrap.json"], workdir='build/cordova-cli', haltOnFailure=False, description='Remove CLI SW'),
            ShellCommand(command=["npm", "install"], workdir='build/cordova-cli', haltOnFailure=True, description='Install CLI'),
            ShellCommand(command=["npm", "test"], workdir='build/cordova-cli', haltOnFailure=True, description='Test CLI'),
            ShellCommand(command=["npm", "install"], workdir='build/cordova-js', haltOnFailure=True, description='Install JS'),
        ]

    def plugman_steps(self):
        """
        Returns a list of steps for CLI setup
        Should not be used in common case, only for common slave tests
        """
        return [
            ShellCommand(command=["rm", "-rf", "cordova-*"], workdir='build', haltOnFailure=False, description='Cordova Clean'),
            ShellCommand(command=["git", "clone", CONFIG.repos['PLUGMAN'], "cordova-plugman"], workdir='build', haltOnFailure=True, description='Get Plugman'),
            ShellCommand(command=["npm", "install"], workdir='build/cordova-plugman', haltOnFailure=True, description='Install Plugman'),
            ShellCommand(command=["npm", "test"], workdir='build/cordova-plugman', haltOnFailure=True, description='Test Plugman'),
        ]

    def prepare_mobilespec_steps(self):
        """Returns a list of steps for mobilespec app setup"""
        platform = self.platform
        # required by coho tools to correctly resolve repo location
        if platform == "blackberry10":
            platform = "blackberry"
        return [
            ShellCommand(command=["npm", "install"], workdir='build/cordova-mobile-spec/createmobilespec', haltOnFailure=True, description='Install createmobilespec'),
            ShellCommand(command=["cordova-coho/coho", "npm-link"], workdir='build', haltOnFailure=True, description='COHO npm-link'),
            # add --skiplink for createmobilespec since
            # it requires cordova-plugman repo to be cloned
            # Re-directing node output to a file is a workaround for a node.js bug
            # on windows where a piped stream does not get flushed when process.exit is called.
            # https://github.com/joyent/node/issues/3584
            ShellCommand(command="node cordova-mobile-spec/createmobilespec/createmobilespec.js --" + platform + " mobilespec --debug --skiplink >createmobilespecOut.txt 2>&1",
                workdir='build', haltOnFailure=True, description='Run createmobilespec', logfiles = {"log" : "createmobilespecOut.txt"}),
            ShellCommand(command=["node", "medic/updateconfig.js", "--" + self.platform], workdir='build', haltOnFailure=True, description='Update config')
        ]

    def deploy_steps(self):
        """
        Returns a list of steps for deploying
        mobilespec application to test device
        """
        return [ShellCommand(command=["node", "medic/build_" + self.platform + ".js"], workdir='build', timeout=CONFIG.build_timeout, description='Deploy', name='Deploy')]

    def build_platform_step(self):
        """Returns a list of steps for building mobilespec application"""
        return [ShellCommand(command=["../cordova-cli/bin/cordova", "build", self.platform], workdir='build/mobilespec', timeout=CONFIG.build_timeout, description='Build', name='Build')]

    def get_all_steps(self):
        """Returns a list of all steps current platform"""
        steps = []
        steps.extend(self.init_workspace_steps())
        steps.extend(self.repos_clone_steps())
        steps.extend(self.cli_steps())
        steps.extend(self.prepare_mobilespec_steps())
        steps.extend(self.deploy_steps())
        return steps

    def get_default_factory(self):
        """Creates and returns a default factory for platform"""
        factory = BuildFactory()
        factory.addSteps(self.get_all_steps())
        return factory

class PlatformTestIOS(PlatformTestBase):
    def __init__(self):
        super(PlatformTestIOS, self).__init__('ios')

class PlatformTestAndroid(PlatformTestBase):
    def __init__(self):
        super(PlatformTestAndroid, self).__init__('android')

class PlatformTestWP8(PlatformTestBase):
    def __init__(self):
        super(PlatformTestWP8, self).__init__('wp8')

    def repos_clone_steps(self):
        steps = super(PlatformTestWP8, self).repos_clone_steps()
        # pach cordova-wp8 template to prevent app to lock the screen.
        # In other case we won't be able to re-install the app next time.
        steps.extend([ShellCommand(command=["node", "medic\src\utils\patch_wp8_template.js"], workdir='build', haltOnFailure=True, description='Patch WP8 template')])
        return steps

class PlatformTestWindows(PlatformTestBase):

    def __init__(self):
        super(PlatformTestWindows, self).__init__('windows')

    def deploy_steps(self):
        return [
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--store80"],
                         workdir='build', timeout=CONFIG.build_timeout,
                         description='Deploy Store80 project',
                         name='Deploy Store80 project'),
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--store"],
                         workdir='build', timeout=CONFIG.build_timeout,
                         description='Deploy Store project',
                         name='Deploy Store project'),
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--phone"],
                         workdir='build', timeout=CONFIG.build_timeout,
                         description='Deploy Phone project',
                         name='Deploy Phone project'),
        ]

class PlatformTestBlackberry(PlatformTestBase):

    def __init__(self):
        super(PlatformTestBlackberry, self).__init__('blackberry10')

    def prepare_mobilespec_steps(self):
        steps = super(PlatformTestBlackberry, self).prepare_mobilespec_steps()
        steps.extend([ShellCommand(command=["node", "../cordova-cli/bin/cordova", "plugin", "rm", "org.apache.cordova.core.medic"], workdir='build/mobilespec', haltOnFailure=True, description='Medic plugin rm')])
        return steps

    def deploy_steps(self):
        steps = [ShellCommand(command=["cp", "platforms/blackberry10/www/config.xml", "./config.xml"], workdir='build/mobilespec', haltOnFailure=True, description='Plugin add')]
        steps.extend(super(PlatformTestBlackberry, self).deploy_steps())
        return steps

if CONFIG.has_platform("ios"):
    c['builders'].append(BuilderConfig(name="cordova-ios", slavenames=["cordova-ios-slave"], factory=PlatformTestIOS().get_default_factory()))

if CONFIG.has_platform("android"):
    c['builders'].append(BuilderConfig(name="cordova-android", slavenames=["cordova-android-slave"], factory=PlatformTestAndroid().get_default_factory()))
    c['builders'].append(BuilderConfig(name="cordova-android-win", slavenames=["cordova-windows-slave"], factory=PlatformTestAndroid().get_default_factory()))

if CONFIG.has_platform("wp8"):
    c['builders'].append(BuilderConfig(name="cordova-wp8", slavenames=["cordova-windows-slave"], factory=PlatformTestWP8().get_default_factory()))
    c['builders'].append(BuilderConfig(name="cordova-wp8-vs2012-win8", slavenames=["cordova-win8-slave"], factory=PlatformTestWP8().get_default_factory()))

if CONFIG.has_platform("windows"):
    c['builders'].append(BuilderConfig(name="cordova-windows", slavenames=["cordova-windows-slave"], factory=PlatformTestWindows().get_default_factory()))
    c['builders'].append(BuilderConfig(name="cordova-windows8-vs2012-win8", slavenames=["cordova-win8-slave"], factory=PlatformTestWindows().get_default_factory()))

if CONFIG.has_platform("blackberry"):
    c['builders'].append(BuilderConfig(name="cordova-blackberry", slavenames=["cordova-blackberry-slave"], factory=PlatformTestBlackberry().get_default_factory()))

if CONFIG.has_platform("chrome"):
    factory_chrome_desktop = BuildFactory()
    factory_chrome_desktop.addStep(ShellCommand(command=["rm", "-rf", "medic"], workdir='build', haltOnFailure=False, description='Medic Clean', descriptionDone='Medic Clean'))
    factory_chrome_desktop.addStep(ShellCommand(command=["git", "clone", "-b", CONFIG.branches['TESTMASTER'], CONFIG.repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic', descriptionDone='Get Medic'))
    # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    factory_chrome_desktop.addStep(ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic', descriptionDone='Install Medic'))
    factory_chrome_desktop.addStep(ShellCommand(command=["rm", "-rf", "mobile-chrome-apps"], workdir='build', haltOnFailure=True, description='Clean Chromespec', descriptionDone='Clean Chromespec'))
    factory_chrome_desktop.addStep(ShellCommand(command=["git", "clone", CONFIG.repos['CCA']], workdir='build', haltOnFailure=True, description='Fetch Chromespec', descriptionDone='Fetch Chromespec'))
    factory_chrome_desktop.addStep(ShellCommand(command=["npm", "install"], workdir='build/medic/runner', haltOnFailure=True, description='Install Runner', descriptionDone='Install Runner'))
    factory_chrome_desktop.addStep(ShellCommand(command=["node", "medic/runner/testrunner.js", "--cmd=medic/runner/runchrome.sh", "--path=mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests", "--args=mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests"], workdir='build', haltOnFailure=True, description='Run Chrome', descriptionDone='Run Chrome'))
    c['builders'].append(BuilderConfig(name="cordova-zchrome-desktop", slavenames=["cordova-common-slave"], factory=factory_chrome_desktop))

    factory_chrome_mobile = BuildFactory()
    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "medic"], workdir='build', haltOnFailure=False, description='Medic Clean', descriptionDone='Medic Clean'))
    factory_chrome_mobile.addStep(ShellCommand(command=["git", "clone", "-b", CONFIG.branches['TESTMASTER'], CONFIG.repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic', descriptionDone='Get Medic'))
    # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic', descriptionDone='Install Medic'))
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install"], workdir='build/medic/runner', haltOnFailure=True, description='Install Runner', descriptionDone='Install Runner'))

    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "mobile-chrome-apps"], workdir='build', haltOnFailure=True, description='Clean cca', descriptionDone='Clean cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["git", "clone", "--recurse-submodules", CONFIG.repos['CCA']], workdir='build', haltOnFailure=True, description='Fetch cca', descriptionDone='Fetch cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install"], workdir='build/mobile-chrome-apps', haltOnFailure=True, description='Install cca', descriptionDone='Install cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "ccatest"], workdir='build', haltOnFailure=True, description='Clean ccatest', descriptionDone='Clean ccatest'))
    factory_chrome_mobile.addStep(ShellCommand(command=["mobile-chrome-apps/src/cca.js", "create", "ccatest", "--copy-from", "mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests"], workdir='build', haltOnFailure=True, description='cca create', descriptionDone='cca create'))

    factory_chrome_mobile.addStep(ShellCommand(command=["node", "../medic/runner/testrunner.js", "--ip=192.168.1.122", "--port=6800", "--cmd=../medic/runner/runcca.sh", "--path=www", "--args=android"], workdir='build/ccatest', timeout=300, haltOnFailure=True, description='Run Mobile', descriptionDone='Run Mobile'))
    c['builders'].append(BuilderConfig(name="cordova-zchrome-mobile", slavenames=["cordova-android-slave"], factory=factory_chrome_mobile))

factory_cli = BuildFactory()
factory_cli.addStep(InstallShellJS())
factory_cli.addStep(RMCommand(path="cordova-*", workdir='build', haltOnFailure=False, description='Cordova Clean'))
factory_cli.addSteps(PlatformTestBase().cli_steps())
c['builders'].append(BuilderConfig(name="cordova-tools-cli", slavenames=["cordova-common-slave"], factory=factory_cli))

# factory_plugman = BuildFactory()
# factory_plugman.addSteps(PlatformTestBase().plugman_steps())
# c['builders'].append(BuilderConfig(name="Tools_Plugman",slavenames=["cordova-common-slave"],factory=factory_plugman))

#mail status

# Store these here for now, not sure if we'll use them.

# mail_to = []
# for mt in json_config['mail']['to']:
#     mail_to.append(str(mt))

# mail_from = str(json_config['mail']['from'])
# mail_pw = str(json_config['mail']['password'])
# mail_serverURL = str(json_config['mail']['serverURL'])
