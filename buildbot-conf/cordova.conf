import os
import re
import json

from buildbot.schedulers.timed import Nightly

from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig

from buildbot.process.properties import renderer
from buildbot.process.properties import Interpolate as I
from buildbot.process.properties import Property as P

from buildbot.steps.source.git import Git
from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import SetProperty

from buildbot.status.results import SUCCESS

# config
MEDIC_CONFIG_FILE    = os.path.join(FP, 'cordova-config.json')
PROJECTS_CONFIG_FILE = os.path.join(FP, 'cordova-repos.json')

def parse_config_file(file_name):
    with open(file_name, 'r') as config_file:
        return json.load(config_file)

medic_config    = parse_config_file(MEDIC_CONFIG_FILE)
projects_config = parse_config_file(PROJECTS_CONFIG_FILE)

# constants
DEFAULT_REPO_NAME   = 'src'
BASE_WORKDIR        = '.'
TEST_APP_NAME       = 'mobilespec'
REPOS_PROPERTY_NAME = 'repositories_config'

OSX     = 'osx'
LINUX   = 'linux'
WINDOWS = 'windows'

# patterns
CORDOVA_REPO_PATTERN = r'^.*(cordova-[^\.]+)\.git$'

# interpretation of every byte-sized return code as success
ALWAYS_SUCCESS = {i: SUCCESS for i in range(0, 256)}

####### UTILITIES

# helper functions
def repo_name_from_url(url):
    match = re.match(CORDOVA_REPO_PATTERN, url)
    if match is not None:
        return match.group(1)
    return DEFAULT_REPO_NAME

def repo_codebase_from_name(name):
    repo          = projects_config[name]
    codebase_name = repo['codebase']
    return repo['codebases'][codebase_name]

def repo_url_from_name(name):
    return repo_codebase_from_name(name)['repo']

def repo_branch_from_name(name):
    return repo_codebase_from_name(name)['branch']

def slugify(string):
    return string.replace(' ', '-')

def running_tasks_on_platform(platform_name, os_name):
    """
    Return the names of tasks possibly started by
    builds on the given platform and OS.
    """
    if platform_name == 'windows':
        return ['WWAHost.exe']
    elif platform_name == 'wp8':
        return ['Xde.exe']
    elif platform_name == 'ios':
        return ['iOS Simulator']
    elif platform_name == 'android':
        if os_name == WINDOWS:
            return ['emulator-arm.exe', 'adb.exe']
        elif os_name == OSX:
            return ['emulator64-x86']
    return []

def can_find_running_tasks(step):
    """
    Return true if an OS and a platform is specified. Those are the
    criteria for finding a task because running_tasks_on_platform uses
    those properties to determine which tasks could be running.
    """
    return (
        (step.build.getProperty('slaveos') is not None) and
        (step.build.getProperty('platform') is not None)
    )

def dont_use_default_repos(step):
    return not use_default_repos(step)

def use_default_repos(step):
    return step.build.getProperty(REPOS_PROPERTY_NAME) is None

# renderers
@renderer
def render_platform_repo_name(props):
    platform_name = props.getProperty('platform')
    repo_name     = 'cordova-{0}'.format(platform_name)
    if platform_name == 'blackberry10':
        repo_name = 'cordova-blackberry'
    return repo_name

@renderer
def render_repo_name(props):
    repo_url = props.getProperty('repository')
    return repo_name_from_url(repo_url)

@renderer
def render_task_kill_command(props):

    os_name       = props.getProperty('slaveos')
    platform_name = props.getProperty('platform')
    running_tasks = running_tasks_on_platform(platform_name, os_name)

    if not running_tasks:
        return ['echo', 'No tasks to kill known.']

    if os_name == WINDOWS:
        command = ['taskkill', '/F']
        for task in running_tasks:
            command.append('/IM')
            command.append(task)

    else:
        command = ['killall']
        command.extend(running_tasks)

    return command

# step wrappers
def DescribedStep(step_class, description, haltOnFailure=True, **kwargs):
    return step_class(description=description, descriptionDone=description, name=slugify(description), haltOnFailure=haltOnFailure, **kwargs)

def SH(workdir=BASE_WORKDIR, timeout=medic_config['app']['timeout'], **kwargs):
    return DescribedStep(ShellCommand, workdir=workdir, timeout=timeout, **kwargs)

def NPM(npm_command, command=list(), what='code', **kwargs):
    return SH(command=['npm', npm_command] + command, description='npm ' + npm_command + 'ing ' + what, **kwargs)

def NPMInstall(command=list(), **kwargs):
    # NOTE:
    #      adding the --cache parameter so that we don't use the global
    #      npm cache, which is shared with other processes
    return NPM('install', command=command + [I('--cache=%(prop:workdir)s/npm_cache')], **kwargs)

def NPMTest(**kwargs):
    return NPM('test', **kwargs)

def BuildbotClone(repourl, what='code', workdir=None, **kwargs):
    if workdir is None:
        workdir = what
    return DescribedStep(Git, 'cloning ' + what, repourl=repourl, workdir=workdir, mode='full', method='clobber', shallow=True, **kwargs)

def CordovaClone(project_name, **kwargs):
    branch   = repo_branch_from_name(project_name)
    repo_url = repo_url_from_name(project_name)
    return BuildbotClone(repourl=repo_url, branch=branch, what=project_name, **kwargs)

def MedicClone(config_path, excludes=list(), **kwargs):
    """
    Clone repositories using medic's checkout.js script.
    """
    command     = ['node', 'cordova-medic/bin/checkout.js', '--config=' + config_path]
    description = 'cloning configured repos'

    if len(excludes) > 0:
        excludes_string = ','.join(excludes)
        command        += ['--exclude', excludes_string]
        description    += ', except ' + excludes_string

    return SH(command=command, description=description)

def Set(name, value, **kwargs):
    return DescribedStep(SetProperty, 'setting ' + name, property=name, value=value, **kwargs)

def Download(mastersrc, slavedest, description, **kwargs):
    # NOTE:
    #      the FileDownload step has a bug and requires the
    #      'description' parameter to be a list
    return FileDownload(mastersrc=mastersrc, slavedest=slavedest, description=[description], workdir=BASE_WORKDIR, **kwargs)

####### SLAVES

# NOTE:
#      these slave names refer to the ones specified in master.cfg,
#      and they must remain defined in master.cfg in order to work
#      with the master.cfg used on Apache's Buildbot
OSX_SLAVES     = ['cordova-ios-slave']
WINDOWS_SLAVES = ['cordova-windows-slave']

####### CHANGESOURCES

# None, because Apache Buildbot's master.cfg manages them, and since
# this file is shared with Apache Buildbot, we should not touch them.

####### STEPS

medic_steps = [

    # remove and re-clone medic
    SH(command=['rm', '-rf', 'cordova-medic'], description='removing medic'),
    CordovaClone('cordova-medic'),

    # install medic
    # NOTE:
    #      --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    NPMInstall(command=['--production'], what='cordova-medic', workdir='cordova-medic'),
]

plugins_cleanup_steps = [

    # set build properties
    Set('repository_name', render_repo_name),

    # kill running emulators
    SH(
        command         = render_task_kill_command,
        doStepIf        = can_find_running_tasks,
        description     = 'killing running tasks',
        haltOnFailure   = False,
        flunkOnWarnings = False,
        warnOnWarnings  = False,
        decodeRC        = ALWAYS_SUCCESS,
    ),

    # clean up
    SH(command=['rm', '-rf', '~/.cordova/*'], description='removing cache'),
    SH(command=['node', 'cordova-medic/bin/medic.js', 'clean', '--exclude', 'cordova-medic'], description='cleaning workspace'),
]

common_plugins_steps = medic_steps + plugins_cleanup_steps + [

    # download medic's config to slave
    Download(mastersrc=MEDIC_CONFIG_FILE, slavedest='cordova-medic/config.json', description='downloading master\'s config'),

    # download repo config
    # NOTE:
    #      only one of these steps should be executed; thanks
    #      to Buildbot there is no good if-else construct for
    #      builds, so we have two steps with 'doStepIf's
    SH(command=['curl', P(REPOS_PROPERTY_NAME), '--output', 'cordova-medic/cordova-repos.json'], description='downloading custom repo config', doStepIf=dont_use_default_repos),
    Download(mastersrc=PROJECTS_CONFIG_FILE, slavedest='cordova-medic/cordova-repos.json', description='downloading default repo config', doStepIf=use_default_repos),

    # clone all repos
    MedicClone(config_path='cordova-medic/cordova-repos.json', excludes=['cordova-medic']),

    # install tools
    NPMInstall(what='cordova-coho',        workdir='cordova-coho'),
    NPMInstall(what='cordova-lib',         workdir='cordova-lib/cordova-lib'),
    NPMInstall(what='cordova-cli',         workdir='cordova-cli'),
    NPMInstall(what='cordova-js',          workdir='cordova-js'),
    NPMInstall(what='cordova-plugman',     workdir='cordova-plugman'),
    NPMInstall(what='platform',            workdir=render_platform_repo_name),
    NPMInstall(what='cordova-mobile-spec', workdir='cordova-mobile-spec/createmobilespec'),

    # link the installed code
    SH(command=['cordova-coho/coho', 'npm-link'], description='coho link'),

    # prepare the test app
    SH(
        command = [
            'node',
            'cordova-mobile-spec/createmobilespec/createmobilespec.js',
            '--copywww',
            '--skiplink',
            I('--%(prop:platform)s'),
            TEST_APP_NAME
        ],
        description='creating mobilespec app'
    ),
    SH(
        command=[
            'node',
            'cordova-medic/updateconfig.js',
            I('--%(prop:platform)s'),
        ],
        description='preparing mobilespec app'
    ),
]

cordova_plugins_all = BuildFactory()
cordova_plugins_all.addSteps(common_plugins_steps)
cordova_plugins_all.addSteps([
    SH(command=['node', I('cordova-medic/build_%(prop:platform)s.js')], description='running tests'),
])

# WORKAROUND:
#            this is here to match what medic already does; these
#            should be their own builders in the future, using a
#            proper test matrix
cordova_plugins_windows = BuildFactory()
cordova_plugins_windows.addSteps(common_plugins_steps)
cordova_plugins_windows.addSteps([
    SH(command=['node', I('cordova-medic/build_%(prop:platform)s.js'), "--store80"], haltOnFailure=False, description='running tests (Windows 8.0)'),
    SH(command=['node', I('cordova-medic/build_%(prop:platform)s.js'), "--store"], haltOnFailure=False, description='running tests (Windows 8.1)'),
    SH(command=['node', I('cordova-medic/build_%(prop:platform)s.js'), "--phone"], haltOnFailure=False, description='running tests (Windows Phone 8.1)'),
])

####### BUILDERS

c['builders'].extend([

    # plugins builders
    BuilderConfig(name='cordova-ios',            slavenames=OSX_SLAVES,     factory=cordova_plugins_all,     properties={'platform': 'ios',          'slaveos': OSX}),
    BuilderConfig(name='cordova-android-osx',    slavenames=OSX_SLAVES,     factory=cordova_plugins_all,     properties={'platform': 'android',      'slaveos': OSX}),
    BuilderConfig(name='cordova-blackberry-osx', slavenames=OSX_SLAVES,     factory=cordova_plugins_all,     properties={'platform': 'blackberry10', 'slaveos': OSX}),
    BuilderConfig(name='cordova-windows',        slavenames=WINDOWS_SLAVES, factory=cordova_plugins_windows, properties={'platform': 'windows',      'slaveos': WINDOWS}),
    BuilderConfig(name='cordova-wp8',            slavenames=WINDOWS_SLAVES, factory=cordova_plugins_all,     properties={'platform': 'wp8',          'slaveos': WINDOWS}),
    BuilderConfig(name='cordova-android-win',    slavenames=WINDOWS_SLAVES, factory=cordova_plugins_all,     properties={'platform': 'android',      'slaveos': WINDOWS}),
    BuilderConfig(name='cordova-blackberry-win', slavenames=WINDOWS_SLAVES, factory=cordova_plugins_all,     properties={'platform': 'blackberry10', 'slaveos': WINDOWS}),
])

####### STATUS TARGETS

c['status'].extend([

    # IRC bot
    words.IRC(
        host          = "irc.freenode.net",
        nick          = "cordova-bot",
        allowForce    = True,
        channels      = ["#cordova"],
        categories    = ["all"],
        notify_events = {
            "successToFailure": 1,
            "failureToSuccess": 1,
            "started":          0,
            "finished":         1,
        },
    )
])

####### SCHEDULERS

c['schedulers'].extend([
    Nightly(
        name         = 'cordova_plugins_periodic',
        reason       = 'periodic',
        branch       = None,
        minute       = [30],
        hour         = range(0, 24, 2),
        builderNames = [
            'cordova-ios',
            'cordova-android-osx',
            'cordova-blackberry-osx',
            'cordova-windows',
            'cordova-wp8',
            'cordova-android-win',
            'cordova-blackberry-win',
        ],
    ),
])
