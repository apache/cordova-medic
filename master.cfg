#!/usr/bin/python
# -*- python -*-
# ex: set syntax=python:

# This is the buildmaster config file for cordova. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

from twisted.python import log

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
# from buildbot import manhole

# Manhole permits to ssh into the buildbot master process and examine the global variables.
# Temporary disable it since there known issues with manhole on Windows platform so buildbot can't launch master
# c['manhole']=manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd")

# Detect system we are running
import platform
log.msg("Platform is %s" % (platform.system(),))

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

import json
with open("../config.json") as f:
    json_config = json.load(f)

with open("../repos.json") as f:
    json_repos = json.load(f)

platform_list = json_config['app']['platforms']
branch_release = str(json_config['app']['release'])
build_timeout = json_config['app']['timeout']

build_android = ('android' in platform_list)
build_chrome = ('chrome' in platform_list)
build_ios = ('ios' in platform_list)
build_wp8 = ('wp8' in platform_list)
build_windows = ('windows' in platform_list)
build_blackberry = ('blackberry' in platform_list)
projectbranches = ['master', branch_release]
polltime = 300
stabletime = 30
# GitPoller on Windows fails if gitbin location is not provided.
# Set git location if running medic master on Windows
git_bin = ""  #"c:\Program Files (x86)\Git\cmd\git.exe"
mail_to = []
for mt in json_config['mail']['to']:
    mail_to.append(str(mt))

mail_from = str(json_config['mail']['from'])
mail_pw = str(json_config['mail']['password'])
mail_serverURL = str(json_config['mail']['serverURL'])


def getBranches(tags):
    result = []
    for b in tags:
        if(b == 'RELEASE'):
            result.append(branch_release)
        else:
            result.append(str(b))
    return result


####### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.changes import pb

c['slaves'] = [
    BuildSlave("cordova-ios-slave", "pass", max_builds=1),
    BuildSlave("cordova-android-slave", "pass", max_builds=1),
    BuildSlave("cordova-windows-slave", "pass", max_builds=2),
    BuildSlave("cordova-win8-slave", "pass", max_builds=2),
    BuildSlave("cordova-blackberry-slave", "pass", max_builds=1),
    BuildSlave("cordova-common-slave", "pass", max_builds=3)
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9889

repos = {}
branches = {}


# periodically fetches from a remote git repository and processes any changes
def listen_for_source_change(repo_url, project, category, branches):
    if (git_bin == ""):
        c['change_source'].append(
            GitPoller(repo_url, project=project, category=category, branches=branches, pollinterval=polltime))
    else:
        c['change_source'].append(
            GitPoller(repo_url, gitbin=git_bin, project=project, category=category, branches=branches, pollinterval=polltime))

for jrepo in json_repos['repos']:
    cat = str(jrepo['category'])
    title = str(jrepo["title"])
    repo_url = str(jrepo['repo'])
    if cat == "PLUGIN":
        listen_for_source_change(repo_url, cat, cat, getBranches([jrepo['release'], jrepo['current']]))

    elif not (cat == "PLATFORM"):
        repos[title] = repo_url
        branches[title] = str(jrepo['current'])
        listen_for_source_change(repo_url, cat, cat, getBranches([jrepo['release'], jrepo['current']]))

    else:
        repos[title] = repo_url
        branches[title] = str(jrepo['current'])
        if (build_android and title == "ANDROID"
            or build_ios and title == "IOS"
            or build_wp8 and title == "WP8"
            or build_windows and title == "WINDOWS"
            or build_blackberry and title == "BLACKBERRY"):

            listen_for_source_change(repo_url, title, 'PLATFORM', getBranches([jrepo['release'], jrepo['current']]))

c['change_source'].append(pb.PBChangeSource(port=9999, user='Cordova', passwd='Cordova'))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

builders = []
force_builders = []
c['schedulers'] = []

for test in json_repos['tests']:
    if test["platform"] in platform_list:
        if type(test["builder"]) == list:
            builders = [str(b) for b in test["builder"]]
        else:
            builders = [str(test["builder"])]

        force_builders.extend(builders)

        c['schedulers'].append(SingleBranchScheduler(
                               name=str(test["title"]),
                               change_filter=filter.ChangeFilter(branch=test["branch"], project=test["categories"]),
                               treeStableTimer=stabletime,
                               builderNames=builders))

c['schedulers'].append(ForceScheduler(name="force", builderNames=force_builders))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload
from buildbot.config import BuilderConfig

cli_steps = [
    ShellCommand(command=["git", "clone", "-b", branches['CLI'], repos['CLI'], "cordova-cli"], workdir='build', haltOnFailure=True, description='Get CLI'),
    ShellCommand(command=["mkdir", "node_modules"], workdir='build/cordova-cli', haltOnFailure=True, description='Prepare cordova-lib'),
    ShellCommand(command=["git", "clone", "-b", branches['CORDOVA-LIB'], repos['CORDOVA-LIB'], "cordova-lib"], workdir='build', haltOnFailure=True, description='Update cordova-lib'),
    ShellCommand(command=["node", "-e", "require('fs').symlinkSync('../../cordova-lib/cordova-lib', 'cordova-lib', 'dir')"], workdir='build/cordova-cli/node_modules', haltOnFailure=False, description='Link cordova-lib'),
    ShellCommand(command=["npm", "install", "--production"], workdir='build/cordova-cli/node_modules/cordova-lib', haltOnFailure=True, description='Install cordova-lib'),
    ShellCommand(command=["rm", "-f", "npm-shrinkwrap.json"], workdir='build/cordova-cli', haltOnFailure=False, description='Remove CLI SW'),
    ShellCommand(command=["npm", "install"], workdir='build/cordova-cli', haltOnFailure=True, description='Install CLI'),
    ShellCommand(command=["npm", "test"], workdir='build/cordova-cli', haltOnFailure=True, description='Test CLI'),
]

plugman_steps = [
    ShellCommand(command=["git", "clone", repos['PLUGMAN'], "cordova-plugman"], workdir='build', haltOnFailure=True, description='Get Plugman'),
    ShellCommand(command=["npm", "install"], workdir='build/cordova-plugman', haltOnFailure=True, description='Install Plugman'),
    ShellCommand(command=["npm", "test"], workdir='build/cordova-plugman', haltOnFailure=True, description='Test Plugman'),
]

c['builders'] = []


class PlatformTestBase(object):
    def __init__(self, platform):
        self.platform = platform

    def init_workspace_steps(self):
        return [
            ShellCommand(command=["rm", "-rf", "~/.cordova/" + self.platform], workdir='build', haltOnFailure=False, description='Remove cache'),
            ShellCommand(command=["rm", "-rf", "*"], workdir='build', haltOnFailure=False, description='Clean workdir'),
            ShellCommand(command=["git", "clone", "-b", branches['TESTMASTER'], repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic'),
            # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
            ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic'),
            FileDownload(mastersrc="../config.json", slavedest="medic/config.json", haltOnFailure=True),
            FileDownload(mastersrc="../repos.json", slavedest="medic/repos.json", haltOnFailure=True),
            ShellCommand(command=["git", "clone", repos['COHO']], workdir='build', haltOnFailure=True, description='Get COHO'),
            ShellCommand(command=["npm", "install", "--production"], workdir='build/cordova-coho', haltOnFailure=True, description='Install COHO'),
        ]

    def repos_clone_steps(self):
        platform = self.platform
        # required by coho tools to correctly resolve repo location
        if platform == "blackberry10":
            platform = "blackberry"
        return [
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=MSPEC", "--releasebranch=" + branch_release], workdir='build', haltOnFailure=True, description='Clone Mobilespec'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=PLUGIN", "--releasebranch=" + branch_release], workdir='build', haltOnFailure=True, description='Clone Plugins'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=" + platform, "--releasebranch=" + branch_release], workdir='build', haltOnFailure=True, description='Clone Platform'),
            ShellCommand(command=["node", "medic/checkout.js", "--path=medic/repos.json", "--cat=JS", "--releasebranch=" + branch_release], workdir='build', haltOnFailure=True, description='Clone JS')
        ]

    def create_app_steps(self):
        return [
            ShellCommand(command=["node", "cordova-cli/bin/cordova", "create", "mobilespec", "org.apache.mobilespec", "mobilespec", "--link-to=./cordova-mobile-spec/www"], workdir='build', haltOnFailure=True, description='CLI Create'),
            ShellCommand(command=["node", "medic/writejson.js", "--branch=master"], workdir='build', haltOnFailure=True, description='Write json')
        ]

    def platform_add_steps(self):
        platform = self.platform
        # required by coho tools to correctly resolve repo location
        if platform == "blackberry10":
            platform = "blackberry"
        platformPath = "../cordova-" + platform
        return [ShellCommand(command=["../cordova-cli/bin/cordova", "platform", "add", platformPath], workdir='build/mobilespec', haltOnFailure=True, description='Platform Add')]

    def build_cordovajs_steps(self):
        return [
            ShellCommand(command=["npm", "install"], workdir='build/cordova-js', description='Install Grunt'),
            ShellCommand(command=["node", "../medic/build_js.js", self.platform], workdir='build/cordova-js', description='Grunt')
        ]

    def prepare_mobilespec_steps(self):
        return [
            ShellCommand(command=["npm", "install"], workdir='build/cordova-mobile-spec/createmobilespec', haltOnFailure=True, description='Install createmobilespec'),
            ShellCommand(command=["cordova-coho/coho", "npm-link"], workdir='build', haltOnFailure=True, description='COHO npm-link'),
            ShellCommand(command=["cordova-mobile-spec/createmobilespec/createmobilespec", "--" + self.platform, "mobilespec"], workdir='build', haltOnFailure=True, description='Run createmobilespec'),
            ShellCommand(command=["node", "../cordova-cli/bin/cordova", "plugin", "add", "../medic/cordova-plugin-medic"], workdir='build/mobilespec', haltOnFailure=True, description='Medic plugin add'),
            ShellCommand(command=["node", "medic/updateconfig.js", "--" + self.platform], workdir='build', haltOnFailure=True, description='Update config')
        ]

    def copy_cordovajs_steps(self):
        return [ShellCommand(command=["cp", "-f", "cordova-js/pkg/cordova." + self.platform + ".js", "mobilespec/platforms/" + self.platform + "/platform_www/cordova.js"], workdir='build', haltOnFailure=True, description='Copy JS')]

    def deploy_steps(self):
        return [ShellCommand(command=["node", "medic/build_" + self.platform + ".js"], workdir='build', timeout=build_timeout, description='Deploy', name='Deploy')]

    def build_platform_step(self):
        return [ShellCommand(command=["../cordova-cli/bin/cordova", "build", self.platform], workdir='build/mobilespec', timeout=build_timeout, description='Build', name='Build')]

    def get_all_steps(self):
        steps = []
        steps.extend(self.init_workspace_steps())
        steps.extend(self.repos_clone_steps())
        steps.extend(cli_steps)
        steps.extend(plugman_steps)
        steps.extend(self.create_app_steps())
        steps.extend(self.platform_add_steps())
        steps.extend(self.build_cordovajs_steps())
        steps.extend(self.prepare_mobilespec_steps())
        steps.extend(self.copy_cordovajs_steps())
        steps.extend(self.deploy_steps())
        return steps

    def get_build_steps(self):
        steps = []
        steps.extend(self.init_workspace_steps())
        steps.extend(self.repos_clone_steps())
        steps.extend(cli_steps)
        steps.extend(self.create_app_steps())
        steps.extend(self.platform_add_steps())
        steps.extend(self.build_platform_step())
        return steps


class PlatformTest_iOS(PlatformTestBase):
    def __init__(self):
        super(PlatformTest_iOS, self).__init__('ios')


class PlatformTest_Android(PlatformTestBase):
    def __init__(self):
        super(PlatformTest_Android, self).__init__('android')


class PlatformTest_WP8(PlatformTestBase):

    def __init__(self):
        super(PlatformTest_WP8, self).__init__('wp8')
    # override cordova.js copy step since grunt builds it as cordova.windowsphone.js, not cordova.wp8.js

    def copy_cordovajs_steps(self):
        return [ShellCommand(command=["cp", "-f", "cordova-js/pkg/cordova.windowsphone.js", "mobilespec/platforms/" + self.platform + "/platform_www/cordova.js"], workdir='build', haltOnFailure=True, description='Copy JS')]

    def repos_clone_steps(self):
        steps = super(PlatformTest_WP8, self).repos_clone_steps()
        # pach cordova-wp8 template to prevent app to lock the screen. In other case we won't be able to re-install the app next time.
        steps.extend([ShellCommand(command=["node", "medic\src\utils\patch_wp8_template.js"], workdir='build', haltOnFailure=True, description='Patch WP8 template')])
        return steps


class PlatformTest_Windows(PlatformTestBase):

    def __init__(self):
        super(PlatformTest_Windows, self).__init__('windows')

    def deploy_steps(self):
        return [
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--store80"],
                         workdir='build', timeout=build_timeout,
                         description='Deploy Store80 project',
                         name='Deploy Store80 project'),
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--store"],
                         workdir='build', timeout=build_timeout,
                         description='Deploy Store project',
                         name='Deploy Store project'),
            ShellCommand(command=["node", "medic/build_" + self.platform + ".js", "--phone"],
                         workdir='build', timeout=build_timeout,
                         description='Deploy Phone project',
                         name='Deploy Phone project'),
        ]


class PlatformTest_Blackberry(PlatformTestBase):

    def __init__(self):
        super(PlatformTest_Blackberry, self).__init__('blackberry10')

    def prepare_mobilespec_steps(self):
        steps = super(PlatformTest_Blackberry, self).prepare_mobilespec_steps()
        steps.extend([ShellCommand(command=["node", "../cordova-cli/bin/cordova", "plugin", "rm", "org.apache.cordova.core.medic"], workdir='build/mobilespec', haltOnFailure=True, description='Medic plugin rm')])
        return steps

    def deploy_steps(self):
        steps = [ShellCommand(command=["cp", "platforms/blackberry10/www/config.xml", "./config.xml"], workdir='build/mobilespec', haltOnFailure=True, description='Plugin add')]
        steps.extend(super(PlatformTest_Blackberry, self).deploy_steps())
        return steps

if(build_ios):
    factory_IOS_master = BuildFactory()
    factory_IOS_master.addSteps(PlatformTest_iOS().get_all_steps())
    c['builders'].append(BuilderConfig(name="IOS", slavenames=["cordova-ios-slave"], factory=factory_IOS_master))

if(build_android):
    factory_Android_master = BuildFactory()
    factory_Android_master.addSteps(PlatformTest_Android().get_all_steps())
    c['builders'].append(BuilderConfig(name="Android", slavenames=["cordova-android-slave"], factory=factory_Android_master))

    factory_Android_build_only = BuildFactory()
    factory_Android_build_only.addSteps(PlatformTest_Android().get_all_steps())
    c['builders'].append(BuilderConfig(name="AndroidWin", slavenames=["cordova-windows-slave"], factory=factory_Android_build_only))

if(build_wp8):
    factory_wp8 = BuildFactory()
    factory_wp8.addSteps(PlatformTest_WP8().get_all_steps())
    c['builders'].append(BuilderConfig(name="WP8", slavenames=["cordova-windows-slave"], factory=factory_wp8))
    c['builders'].append(BuilderConfig(name="WP8_vs2012_win8", slavenames=["cordova-win8-slave"], factory=factory_wp8))

if(build_windows):
    factory_windows = BuildFactory()
    factory_windows.addSteps(PlatformTest_Windows().get_all_steps())
    c['builders'].append(BuilderConfig(name="Windows", slavenames=["cordova-windows-slave"], factory=factory_windows))
    c['builders'].append(BuilderConfig(name="Windows8_vs2012_win8", slavenames=["cordova-win8-slave"], factory=factory_windows))

if(build_blackberry):
    factory_BlackBerry = BuildFactory()
    factory_BlackBerry.addSteps(PlatformTest_Blackberry().get_all_steps())
    c['builders'].append(BuilderConfig(name="BlackBerry", slavenames=["cordova-blackberry-slave"], factory=factory_BlackBerry))

# TODO. temporary disable separate cli and plugman tests on Windows
if not platform.system() == "Windows" :
    factory_cli = BuildFactory()
    factory_cli.addStep(ShellCommand(command=["rm","-rf","cordova-*"],workdir='build',haltOnFailure=False,description='Cordova Clean'))
    factory_cli.addSteps(cli_steps)
    c['builders'].append(BuilderConfig(name="Tools_CLI",slavenames=["cordova-common-slave"],factory=factory_cli))

#    factory_plugman = BuildFactory()
#    factory_plugman.addSteps(plugman_steps)
#    c['builders'].append(BuilderConfig(name="Tools_Plugman",slavenames=["cordova-common-slave"],factory=factory_plugman))

if build_chrome:
    factory_chrome_desktop = BuildFactory()
    factory_chrome_desktop.addStep(ShellCommand(command=["rm", "-rf", "medic"], workdir='build', haltOnFailure=False, description='Medic Clean', descriptionDone='Medic Clean'))
    factory_chrome_desktop.addStep(ShellCommand(command=["git", "clone", "-b", branches['TESTMASTER'], repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic', descriptionDone='Get Medic'))
    # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    factory_chrome_desktop.addStep(ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic', descriptionDone='Install Medic'))
    factory_chrome_desktop.addStep(ShellCommand(command=["rm", "-rf", "mobile-chrome-apps"], workdir='build', haltOnFailure=True, description='Clean Chromespec', descriptionDone='Clean Chromespec'))
    factory_chrome_desktop.addStep(ShellCommand(command=["git", "clone", repos['CCA']], workdir='build', haltOnFailure=True, description='Fetch Chromespec', descriptionDone='Fetch Chromespec'))
    factory_chrome_desktop.addStep(ShellCommand(command=["npm", "install"], workdir='build/medic/runner', haltOnFailure=True, description='Install Runner', descriptionDone='Install Runner'))
    factory_chrome_desktop.addStep(ShellCommand(command=["node", "medic/runner/testrunner.js", "--cmd=medic/runner/runchrome.sh", "--path=mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests", "--args=mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests"], workdir='build', haltOnFailure=True, description='Run Chrome', descriptionDone='Run Chrome'))
    c['builders'].append(BuilderConfig(name="ZChrome_Desktop", slavenames=["cordova-common-slave"], factory=factory_chrome_desktop))

    factory_chrome_mobile = BuildFactory()
    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "medic"], workdir='build', haltOnFailure=False, description='Medic Clean', descriptionDone='Medic Clean'))
    factory_chrome_mobile.addStep(ShellCommand(command=["git", "clone", "-b", branches['TESTMASTER'], repos['TESTMASTER'], "medic"], workdir='build', haltOnFailure=True, description='Get Medic', descriptionDone='Get Medic'))
    # --production switch is used to speed up installation + fruitstrap dev dependency is not supported on Windows
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install", "--production"], workdir='build/medic', haltOnFailure=True, description='Install Medic', descriptionDone='Install Medic'))
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install"], workdir='build/medic/runner', haltOnFailure=True, description='Install Runner', descriptionDone='Install Runner'))

    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "mobile-chrome-apps"], workdir='build', haltOnFailure=True, description='Clean cca', descriptionDone='Clean cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["git", "clone", "--recurse-submodules", repos['CCA']], workdir='build', haltOnFailure=True, description='Fetch cca', descriptionDone='Fetch cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["npm", "install"], workdir='build/mobile-chrome-apps', haltOnFailure=True, description='Install cca', descriptionDone='Install cca'))
    factory_chrome_mobile.addStep(ShellCommand(command=["rm", "-rf", "ccatest"], workdir='build', haltOnFailure=True, description='Clean ccatest', descriptionDone='Clean ccatest'))
    factory_chrome_mobile.addStep(ShellCommand(command=["mobile-chrome-apps/src/cca.js", "create", "ccatest", "--copy-from", "mobile-chrome-apps/chrome-cordova/chrome-apps-api-tests"], workdir='build', haltOnFailure=True, description='cca create', descriptionDone='cca create'))

    factory_chrome_mobile.addStep(ShellCommand(command=["node", "../medic/runner/testrunner.js", "--ip=192.168.1.122", "--port=6800", "--cmd=../medic/runner/runcca.sh", "--path=www", "--args=android"], workdir='build/ccatest', timeout=300, haltOnFailure=True, description='Run Mobile', descriptionDone='Run Mobile'))
    c['builders'].append(BuilderConfig(name="ZChrome_Mobile", slavenames=["cordova-android-slave"], factory=factory_chrome_mobile))


####### STATUS TARGETS
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

# change any of these to True to enable; see the manual for more options
authz_cfg = authz.Authz(auth=auth.BasicAuth([("Cordova", "Cordova")]),
                        gracefulShutdown=False,
                        forceBuild=True,  # 'auth', # use this to test your slave once it is set up
                        forceAllBuilds=False,
                        pingBuilder=False,
                        stopBuild=False,
                        stopAllBuilds=False,
                        cancelPendingBuild=False,
                        )

mn1 = MailNotifier(fromaddr=mail_from,
                   sendToInterestedUsers=False,
                   mode=('change',),
                   extraRecipients=mail_to,
                   relayhost='smtp.gmail.com',
                   smtpPort=587,
                   useTls=True,
                   smtpUser=mail_from,
                   smtpPassword=mail_pw,
                   )

c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(mn1)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cordova Testing"
c['titleURL'] = "http://cordova.apache.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = mail_serverURL

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
